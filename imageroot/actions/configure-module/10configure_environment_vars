#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import secrets
import base64
import hashlib
import os
# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

#This is specific to you module, so you need to change it accordingly.
# we read a json stdin {"vars1":true, "var2":"foo", "vars3": 3} and we writ it to .config/state/environment

# write Postgres configuration to .config/state/postgres.env
POSTGRES_DB = data.get("POSTGRES_DB", "infisical")
POSTGRES_USER = data.get("POSTGRES_USER", "infisical")
POSTGRES_PASSWORD = data.get("POSTGRES_PASSWORD", "J5brHrAXFLQSif0K")
POSTGRES_HOST = data.get("POSTGRES_HOST", "postgresql-app")
POSTGRES_PORT = data.get("POSTGRES_PORT", "5432")


postgres_config = {
    "POSTGRES_DB":POSTGRES_DB,
    "POSTGRES_USER": POSTGRES_USER,
    "POSTGRES_PASSWORD": POSTGRES_PASSWORD,
    "POSTGRES_HOST": POSTGRES_HOST,
    "POSTGRES_PORT": POSTGRES_PORT
}
# write it to .config/state/postgres.env
agent.write_envfile("database.env", postgres_config)


DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"
REDIS_URL = "redis://redis-app:6379"
# Generate AUTH_SECRET




rdb = agent.redis_connect(use_replica=True)
smtp_settings = agent.get_smarthost_settings(rdb)
SMTP_HOST = smtp_settings['host']
SMTP_PORT = smtp_settings['port']
SMTP_NAME = smtp_settings['username']
SMTP_USERNAME = smtp_settings['username']
SMTP_PASSWORD = smtp_settings['password']
HOST = data.get("host", "")

app_config = {
    "DB_CONNECTION_URI": DATABASE_URL,
    "REDIS_URL": REDIS_URL,
    "SITE_URL": "https://"+HOST,
    "SMTP_HOST": SMTP_HOST,
    "SMTP_PORT": SMTP_PORT,
    "SMTP_NAME": SMTP_NAME,
    "SMTP_USERNAME": SMTP_USERNAME,
    "SMTP_PASSWORD": SMTP_PASSWORD,
    "NODE_ENV": "production",
    "POSTGRES_DB":POSTGRES_DB,
    "POSTGRES_USER": POSTGRES_USER,
    "POSTGRES_PASSWORD": POSTGRES_PASSWORD,
}
agent.write_envfile("app.env", app_config)

# just before starting systemd unit
#agent.dump_env()
